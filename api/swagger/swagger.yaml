swagger: "2.0"
info:
  version: "0.0.1"
  title: Elvis API
basePath: /

schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions :
  twitterOauth:    # <---- arbitrary name
    type: oauth2
    flow: implicit
    authorizationUrl: http://127.0.0.1:10010/auth/login/twitter/callback
    scopes:
      read: Grants read access
  githubOauth:    # <---- arbitrary name
    type: oauth2
    flow: implicit
    authorizationUrl: http://localhost:10010/auth/login/github/callback
    scopes:
      read: Grants read access
      user:email: Grants read-only access to user email
paths:
  /swagger.yaml:
    x-swagger-pipe: swagger_raw

  /cpvs:
    x-swagger-router-controller: cpvs
    get:
      tags:
        - cpvs
      description: Returns a list of all cpvs in the db
      operationId: listCpvs
      parameters:
        - name: countries
          in: query
          description: Get only Cpvs from contracts from a certain country
          required: false
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Cpv"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/register:
    x-swagger-router-controller: auth
    post:
      tags:
        - auth
      description: Register user in db with sending activation email
      operationId: register
      parameters:
        - name: body
          in: body
          description: Body params
          required: true
          schema:
            $ref: "#/definitions/RegisterModel"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/RegisterSuccessModel"
        "400":
          description: Bad request ['Validation error.', 'The email address is already taken.']
          schema:
            $ref: "#/definitions/BadRequestModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/login:
    x-swagger-router-controller: auth
    post:
      tags:
        - auth
      description: User login using email and password
      operationId: login
      parameters:
        - name: body
          in: body
          description: Body params
          required: true
          schema:
            $ref: "#/definitions/RegisterModel"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LoginSuccessModel"
        "400":
          description: Bad request ['Email is required.', 'Password is required.', 'Validation error.']
          schema:
            $ref: "#/definitions/BadRequestModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/login/twitter:
      x-swagger-router-controller: auth
      get:
        tags:
          - auth
        description: User login with twitter
        operationId: loginWithTwitter
        security:
          - twitterOauth: [read]
        responses:
          "200":
            description: Success
            schema:
              $ref: "#/definitions/LoginSuccessModel"
          "500":
            description: Internal Server Error
            schema:
              $ref: "#/definitions/InternalErrorModel"
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  /auth/login/github:
    x-swagger-router-controller: auth
    get:
      tags:
        - auth
      description: User login with github
      operationId: loginWithGithub
      security:
        - githubOauth: [read, user:email]
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LoginSuccessModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/token/refresh:
    x-swagger-router-controller: auth
    post:
      tags:
        - auth
      description: Get new tokens pair using refresh token
      operationId: refreshToken
      parameters:
        - name: x-refresh-token
          type: string
          in: header
          description: Refresh Token
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LoginSuccessModel"
        "400":
          description: Bad request ['Refresh token is not provided.', 'Wrong refresh token.']
          schema:
            $ref: "#/definitions/BadRequestModel"
        "401":
          description: Unauthorized ['Refresh token expired.']
          schema:
            $ref: "#/definitions/UnauthorizedModel"
        "500":
          description: Internal Server Error ['The problem with refresh token check occurred.']
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/password/forgot:
      x-swagger-router-controller: auth
      post:
        tags:
          - auth
        description: Get password reset link on email
        operationId: forgotPassword
        parameters:
          - name: body
            in: body
            description: Body params
            required: true
            schema:
              $ref: "#/definitions/ForgotPasswordModel"
        responses:
          "200":
            description: Success
            schema:
              $ref: "#/definitions/SuccessModel"
          "400":
            description: Bad request ['Email is not provided.', 'User is not active.']
            schema:
              $ref: "#/definitions/BadRequestModel"
          "404":
            description: Not found ['User not found.']
            schema:
              $ref: "#/definitions/NotFoundModel"
          "500":
            description: Internal Server Error
            schema:
              $ref: "#/definitions/InternalErrorModel"
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  /auth/password/reset:
    x-swagger-router-controller: auth
    get:
      tags:
        - auth
      description: Verify token and redirect to reset password form
      operationId: getPasswordReset
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/RedirectModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - auth
      description: Reset password
      operationId: passwordReset
      parameters:
        - name: body
          in: body
          description: Body params
          required: true
          schema:
            $ref: "#/definitions/PasswordResetModel"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Bad request ['Token is not provided.', 'Wrong token.', 'User is not active.', 'Passwords do not match.']
          schema:
            $ref: "#/definitions/BadRequestModel"
        "404":
          description: Not found ['User not found.']
          schema:
            $ref: "#/definitions/NotFoundModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /account:
    x-swagger-router-controller: account
    get:
      tags:
        - account
      description: Get user account
      operationId: getAccount
      parameters:
        - name: authorization
          type: string
          in: header
          description: Bearer access token of the user
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AccountSuccessModel"
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/BadRequestModel"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/UnauthorizedModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - account
      description: Delete user account
      operationId: deleteAccount
      parameters:
        - name: authorization
          type: string
          in: header
          description: Bearer access token of the user
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessModel"
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/BadRequestModel"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/UnauthorizedModel"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/InternalErrorModel"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  Cpv:
    required:
      - code
    properties:
      code:
        type: string
        description: CPV code
  RegisterModel:
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: Valid email address
      password:
        type: string
        description: Password string
  RegisterSuccessModel:
    properties:
      userId:
        type: string
        description: Created user ID
      email:
        type: string
        description: Email address
      regProvider:
        type: string
        description: Registration provider is 'local'
  LoginSuccessModel:
    properties:
      accessToken:
        type: string
        description: Access token with short life
      refreshToken:
        type: string
        description: Refresh token with long life
  AccountSuccessModel:
    properties:
      status:
        type: number
        description: "200"
      message:
        type: string
        description: Success
      data:
        type: object
        properties:
          userId:
            type: string
          email:
            type: string
          regProvider:
            type: string
          twitterId:
            type: string
          githubId:
            type: string
          active:
            type: string
  ForgotPasswordModel:
    properties:
      email:
        type: string
        format: email
  PasswordResetModel:
    properties:
      newPassword:
        type: string
      confirmPassword:
        type: string
        description: Same as new password
      t:
        type: string
        description: Reset token

  SuccessModel:
    properties:
      status:
        type: number
        description: Status number is 200
      message:
        type: string
        description: Success
  RedirectModel:
    properties:
      status:
        type: number
        description: Status number is 302
      location:
        type: string
        description: Redirect url
  BadRequestModel:
    properties:
      status:
        type: number
        description: Status number is 400
      message:
        type: string
  UnauthorizedModel:
    properties:
      status:
        type: number
        description: Status number is 401
      message:
        type: string
  NotFoundModel:
    properties:
      status:
        type: number
        description: Status number is 404
      message:
        type: string
  InternalErrorModel:
    properties:
      status:
        type: number
        description: Status number is 500
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
