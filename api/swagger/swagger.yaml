swagger: "2.0"
info:
  version: "0.0.1"
  title: Elvis API
basePath: /

schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions :
  twitterOauth:    # <---- arbitrary name
    type: oauth2
    flow: implicit
    # The callbackURL registered in Twitter
    authorizationUrl: http://localhost:10010/account/login/twitter/callback
    scopes:
      read: Grants read access
  githubOauth:    # <---- arbitrary name
    type: oauth2
    flow: implicit
    # The callbackURL registered in Github
    authorizationUrl: http://localhost:10010/account/login/github/callback
    scopes:
      read: Grants read access
      user:email: Grants read-only access to user email
paths:
  /swagger.yaml:
    x-swagger-pipe: swagger_raw

  /tenders/cpvs:
    x-swagger-router-controller: cpvs
    get:
      tags:
        - cpvs
      description: Returns a list of CPVs from all the tenders in the database
      operationId: getTenderCpvs
      parameters:
        - name: countries
          in: query
          description: Get only the CPVs of tenders from certain countries - array of ISO 3166-1 alpha-2 country codes
          required: false
          type: array
          items:
            type: string
        - name: years
          in: query
          description: Get only the CPVs of tenders from certain years - array of years
          required: false
          type: array
          items:
            type: integer
        - name: buyers
          in: query
          description: Get only the CPVs of tenders awarded by certain buyers - array of buyer IDs
          required: false
          type: array
          items:
            type: string
            format: uuid
        - name: bidders
          in: query
          description: Get only the CPVs of tenders awarded to certain bidders - array of bidder IDs
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CpvIndexResponse"
        "400":
          description: Bad request [Request validation failed (wrong param type)]
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tenders/countries:
    x-swagger-router-controller: countries
    get:
      tags:
        - countries
      description: Returns a list of all the countries for which we have tenders
      operationId: getTenderCountries
      parameters:
        - name: cpvs
          in: query
          description: Get only the countries of tenders that have these CPVs - array of CPV codes
          required: false
          type: array
          items:
            type: string
        - name: years
          in: query
          description: Get only the countries of tenders from certain years - array of years
          required: false
          type: array
          items:
            type: integer
        - name: buyers
          in: query
          description: Get only the countries of tenders awarded by certain buyers - array of buyer IDs
          required: false
          type: array
          items:
            type: string
            format: uuid
        - name: bidders
          in: query
          description: Get only the countries of tenders awarded to certain bidders - array of bidder IDs
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CountryIndexResponse"
        "400":
          description: Bad request [Request validation failed (wrong param type)]
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tenders/years:
    x-swagger-router-controller: years
    get:
      tags:
        - years
      description: Returns a list of all the years for which we have tenders
      operationId: getTenderYears
      parameters:
        - name: cpvs
          in: query
          description: Get only the years with tenders that have these CPVs - array of CPV codes
          required: false
          type: array
          items:
            type: string
        - name: countries
          in: query
          description: Get only the years with tenders from certain countries - array of ISO 3166-1 alpha-2 country codes
          required: false
          type: array
          items:
            type: string
        - name: buyers
          in: query
          description: Get only the years with tenders awarded by certain buyers - array of buyer IDs
          required: false
          type: array
          items:
            type: string
            format: uuid
        - name: bidders
          in: query
          description: Get only the years with tenders awarded to certain bidders - array of bidder IDs
          required: false
          type: array
          items:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/YearIndexResponse"
        "400":
          description: Bad request [Request validation failed (wrong param type)]
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tenders/actors:
    x-swagger-router-controller: actors
    get:
      tags:
        - actors
      description: Returns a list of all the actors (bidders and buyers) involved in tenders
      operationId: getTenderActors
      parameters:
        - name: name
          in: query
          description: Get only the actors who's name matches this string
          required: false
          type: string
          minLength: 2
        - name: limit
          in: query
          description: Limit suggestions of actors
          required: false
          type: integer
        - name: cpvs
          in: query
          description: Get only the actors involved in tenders that have these CPVs - array of CPV codes
          required: false
          type: array
          items:
            type: string
        - name: countries
          in: query
          description: Get only the actors involved in tenders from certain countries - array of ISO 3166-1 alpha-2 country codes
          required: false
          type: array
          items:
            type: string
        - name: years
          in: query
          description: Get only the actors involved in tenders from certain years - array of years
          required: false
          type: array
          items:
            type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ActorIndexResponse"
        "400":
          description: Bad request [Request validation failed (wrong param type)]
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account:
    x-swagger-router-controller: accounts
    post:
      tags:
        - account
      description: Create a user account and send activation email
      operationId: createAccount
      parameters:
        - name: body
          in: body
          description: Account credentials
          required: true
          schema:
            $ref: "#/definitions/AccountCredentials"
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/AccountCreateResponse"
        "400":
          description: Bad request ['Validation error.', 'The email address is already taken.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - account
      description: Get user account
      operationId: getAccount
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AccountResponse"
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - account
      description: Delete user account
      operationId: deleteAccount
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user
          required: true
      responses:
        "204":
          description: Successfully deleted
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account/activate:
    x-swagger-router-controller: accounts
    get:
      tags:
        - account
      description: Activate account using the activation token sent in email at account creation
      operationId: activateAccount
      parameters:
        - name: t
          in: query
          description: Activation token sent thorough email at account creation
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AccountResponse"
        "400":
          description: Bad request ['Token is not provided', 'Bad token', 'User already active']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Not found ['User not found']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account/login:
    x-swagger-router-controller: accounts
    post:
      tags:
        - login
      description: Log in account using email and password
      operationId: login
      parameters:
        - name: body
          in: body
          description: Body params
          required: true
          schema:
            $ref: "#/definitions/AccountCredentials"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Bad request ['Email is required.', 'Password is required.', 'Validation error.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account/login/twitter:
      x-swagger-router-controller: accounts
      get:
        tags:
          - login
        description: User login with twitter. If the user doesn't exist it will be created
        operationId: loginWithTwitter
        security:
          - twitterOauth: [read]
        responses:
          "200":
            description: Success
            schema:
              $ref: "#/definitions/LoginResponse"
          "500":
            description: Internal Server Error
            schema:
              $ref: "#/definitions/ErrorResponse"
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  /account/login/github:
    x-swagger-router-controller: accounts
    get:
      tags:
        - login
      description: User login with github. If the user doesn't exist it will be created
      operationId: loginWithGithub
      security:
        - githubOauth: [read, user:email]
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LoginResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account/token/refresh:
    x-swagger-router-controller: accounts
    get:
      tags:
        - login
      description: Get new tokens pair using refresh token
      operationId: refreshToken
      parameters:
        - name: X-Refresh-Token
          type: string
          in: header
          description: Refresh Token
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Bad request ['Refresh token is not provided.', 'Wrong refresh token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['Refresh token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error ['There was a problem checking the refresh token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account/password/forgot:
    x-swagger-router-controller: accounts
    get:
      tags:
        - account
      description: Get password reset link on email
      operationId: forgotPassword
      parameters:
        - name: email
          in: query
          description: Email of the account that needs a new password
          required: true
          type: string
          format: email
      responses:
        "204":
          description: Successly sent passport reset email
        "400":
          description: Bad request ['Email is not provided.', 'User is not active.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Not found ['User not found.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /account/password/reset:
    x-swagger-router-controller: accounts
    post:
      tags:
        - account
      description: Reset password
      operationId: resetPassword
      parameters:
        - name: body
          in: body
          description: Body params
          required: true
          schema:
            $ref: "#/definitions/ResetPasswordRequest"
      responses:
        "204":
          description: Successfully reset
        "400":
          description: Bad request ['Token is not provided.', 'Wrong token.', 'User is not active.', 'Passwords do not match.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Not found ['User not found.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks:
    x-swagger-router-controller: networks
    post:
      tags:
        - network
      description: Create a network
      operationId: createNetwork
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user who owns the network
          required: false
        - name: body
          in: body
          description: Network params
          required: true
          schema:
            $ref: "#/definitions/CreateNetworkRequest"
      responses:
        "201":
          description: Successfully created network
          schema:
            $ref: "#/definitions/NetworkResponse"
        "400":
          description: Bad request ['Wrong access token.', 'Network "query" can\'t be empty.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - network
      description: List a users networks
      operationId: getNetworks
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user
          required: true
      responses:
        "200":
          description: List networks
          schema:
            $ref: "#/definitions/NetworkIndexResponse"
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{networkID}:
    x-swagger-router-controller: networks
    get:
      tags:
        - network
      description: List a network
      operationId: getNetwork
      parameters:
        - name: networkID
          type: string
          in: path
          description: ID of the network that should be retrieved
          required: true
      responses:
        "200":
          description: List network
          schema:
            $ref: '#/definitions/NetworkResponse'
        "404":
          description: Network not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      tags:
        - network
      description: Update network name and synopsis
      operationId: updateNetwork
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user who owns the network
          required: true
        - name: networkID
          type: string
          in: path
          description: ID of the network that should be updated
          required: true
        - name: body
          in: body
          description: Network params
          required: true
          schema:
            $ref: "#/definitions/UpdateNetworkRequest"
      responses:
        "200":
          description: Successfully updated network
          schema:
            $ref: "#/definitions/NetworkResponse"
        "404":
          description: Network not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: Bad request ['Wrong access token.', 'Network "query" can\'t be empty.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - network
      description: Delete a network
      operationId: deleteNetwork
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user who owns the network
          required: true
        - name: networkID
          type: string
          in: path
          description: ID of the network that should be deleted
          required: true
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Network not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{networkID}/clusters:
    x-swagger-router-controller: actor_clusters
    post:
      tags:
        - network cluster
      description: Create a cluster
      operationId: createCluster
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user who owns the network
          required: false
        - name: networkID
          type: string
          in: path
          description: ID of the network cluser will be part of
          required: true
        - name: body
          in: body
          description: Cluster params
          required: true
          schema:
            $ref: "#/definitions/CreateClusterRequest"
      responses:
        "201":
          description: Successfully created created cluster. This makes the nodes involved in the cluster and their edges hidden so GET `/network/{ID}` to see all changes.
          schema:
            $ref: "#/definitions/NetworkClusterResponse"
        "400":
          description: Bad request ['Wrong access token.', 'Node with ID can't be used in a cluster because it is deactivated']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{networkID}/clusters/{clusterID}:
    x-swagger-router-controller: actor_clusters
    patch:
      tags:
        - network cluster
      description: Update cluster
      operationId: updateCluster
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user who owns the network
          required: true
        - name: networkID
          type: string
          in: path
          description: ID of the network cluster is part of
          required: true
        - name: clusterID
          type: string
          in: path
          description: ID of the custer that should be updated
          required: true
        - name: body
          in: body
          description: Cluster params
          required: true
          schema:
            $ref: "#/definitions/UpdateClusterRequest"
      responses:
        "200":
          description: Successfully updated cluster. This makes the nodes involved in the cluster and their edges hidden so GET `/network/{ID}` to see all changes.
          schema:
            $ref: "#/definitions/NetworkClusterResponse"
        "404":
          description: Cluster/network not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: Bad request ['Wrong access token.', 'Node with ID can't be used in a cluster because it is deactivated']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - network cluster
      description: Delete cluster
      operationId: deleteCluster
      parameters:
        - name: Authorization
          type: string
          in: header
          description: Access token of the user who owns the network
          required: true
        - name: networkID
          type: string
          in: path
          description: ID of the network cluster is part of
          required: true
        - name: clusterID
          type: string
          in: path
          description: ID of the custer that should be deleted
          required: true
      responses:
        "204":
          description: Successfully deleted This makes the nodes involved in the cluster and their edges visible again so GET `/network/{ID}` to see all changes.
        "404":
          description: Cluster/network not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: Bad request ['Wrong access token.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Unauthorized ['No Access Token.', 'Access token expired.']
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{networkID}/nodes/{nodeID}:
    x-swagger-router-controller: network_actors
    get:
      tags:
        - network node
      description: Get node details
      operationId: getNetworkActor
      parameters:
        - name: networkID
          type: string
          in: path
          description: ID of the network the node is part of
          required: true
        - name: nodeID
          type: string
          in: path
          description: ID of the node that should be retrieved
          required: true
      responses:
        "200":
          description: Node details returned
          schema:
            $ref: "#/definitions/NetworkNodeResponse"
        "404":
          description: Network/node not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  AccountCredentials:
    type: object
    required:
      - email
      - password
    additionalProperties: false
    properties:
      email:
        type: string
        format: email
        description: Valid email address
      password:
        type: string
        description: Password
  ResetPasswordRequest:
    type: object
    required:
      - email
      - resetPasswordToken
      - password
      - passwordConfirmation
    additionalProperties: false
    properties:
      email:
        type: string
        format: email
      password:
        type: string
      passwordConfirmation:
        type: string
        description: Same as new password
      resetPasswordToken:
        type: string
        description: Reset token sent through email
  AccountCreateResponse:
    type: object
    required:
      - id
      - email
    properties:
      email:
        type: string
        format: email
        description: Valid email address
      id:
        type: string
        description: User's UUID
  AccountResponse:
    type: object
    allOf:
      - $ref: '#/definitions/AccountCreateResponse'
      - type: object
        properties:
          twitterId:
            type: string
          githubId:
            type: string
          active:
            type: boolean
  LoginResponse:
    type: object
    required:
      - accessToken
      - refreshToken
    properties:
      accessToken:
        type: string
        description: Access token with short life
      refreshToken:
        type: string
        description: Refresh token with long life
  CreateNetworkRequest:
    type: object
    properties:
      network:
        type: object
        required:
          - query
          - settings
        additionalProperties: false
        properties:
          query:
            $ref: "#/definitions/NetworkQuery"
          settings:
            $ref: "#/definitions/NetworkSettings"
          name:
            type: string
            description: Name of the network
          synopsis:
            type: string
            description: Short description of the network
  CreateClusterRequest:
    type: object
    properties:
      cluster:
        type: object
        required:
          - label
          - type
          - nodes
        properties:
          label:
            type: string
            description: Label of the node i.e. name of the cluster
          type:
            type: string
            description: Node type
            enum:
              - bidder
              - buyer
          nodes:
            type: array
            description: Array of node IDs
            items:
              type: string
              description: Node ID
              format: uuid
  UpdateClusterRequest:
    type: object
    properties:
      cluster:
        type: object
        properties:
          label:
            type: string
            description: Label of the node i.e. name of the cluster
          type:
            type: string
            description: Node type
            enum:
              - bidder
              - buyer
          nodes:
            type: array
            description: Array of node IDs
            items:
              type: string
              description: Node ID
              format: uuid
  UpdateNetworkRequest:
    type: object
    properties:
      network:
        properties:
          name:
            type: string
            description: Name of the network
          synopsis:
            type: string
            description: Short description of the network
  NetworkResponse:
    type: object
    properties:
      network:
        $ref: "#/definitions/NetworkWithRelated"
  NetworkClusterResponse:
    type: object
    properties:
      cluster:
        $ref: "#/definitions/NetworkCluster"
  NetworkIndexResponse:
    type: object
    properties:
      networks:
        type: array
        items:
          $ref: "#/definitions/Network"
  NetworkNodeResponse:
    type: object
    properties:
      node:
        $ref: "#/definitions/NodeDetails"
  Network:
    type: object
    required:
      - id
      - query
      - count
      - settings
      - created
      - updated
    properties:
      id:
        type: string
        format: uuid
        description: Networks UUID
      query:
        $ref: "#/definitions/NetworkQuery"
      settings:
        $ref: "#/definitions/NetworkSettings"
      name:
        type: string
        description: Name of the network
      synopsis:
        type: string
        description: Short description of the network
      created:
        type: string
        format: date-time
        description: When the network was created
      updated:
        type: string
        format: date-time
        description: When the network was last updated
      count:
        type: object
        properties:
          nodes:
            type: integer
            description: Number of nodes in the network
          edges:
            type: integer
            description: Number of edges in the network
  NetworkWithRelated:
    allOf:
    - $ref: '#/definitions/Network'
    - type: object
      required:
        - nodes
        - edges
      properties:
        nodes:
          type: array
          items:
            $ref: "#/definitions/NetworkNode"
        edges:
          type: array
          items:
            $ref: "#/definitions/NetworkEdge"
        clusters:
          type: array
          items:
            $ref: "#/definitions/NetworkCluster"
        count:
          type: object
          properties:
            nodes:
              type: integer
              description: Number of nodes in the network
            edges:
              type: integer
              description: Number of edges in the network
  NetworkSettings:
    type: object
    description: Network settings
    additionalProperties: false
    required:
      - nodeSize
      - edgeSize
    properties:
      nodeSize:
        type: string
        description: What should node size represent
        enum:
          - numberOfWinningBids
          - amountOfMoneyExchanged
      edgeSize:
        type: string
        description: What should edge thickness represent
        enum:
          - numberOfWinningBids
          - amountOfMoneyExchanged
  NetworkQuery:
    type: object
    description: Query object containing filters
    additionalProperties: false
    properties:
      countries:
        type: array
        items:
          type: string
          description: ISO 3166-1 alpha-2 country code
      years:
        type: array
        items:
          type: integer
          description: Year
      buyers:
        type: array
        items:
          type: string
          format: uuid
          description: Buyer ID
      bidders:
        type: array
        items:
          type: string
          format: uuid
          description: Bidder ID
      cpvs:
        type: array
        items:
          type: string
          description: CPV code
  BaseNode:
    type: object
    required:
      - id
      - label
      - type
    properties:
      id:
        type: string
        format: uuid
        description: ID of the node i.e. UUID of bidder/buyer the node represents
      label:
        type: string
        description: Label of the node i.e. name of bidder/buyer
      type:
        type: string
        description: Node type
        enum:
          - bidder
          - buyer
      country:
        type: string
        description: ISO 3166-1 alpha-2 country code
      medianCompetition:
        type: number
        format: double
        description: Median number of bidders in this actor's bids
  NetworkNode:
    allOf:
    - $ref: "#/definitions/BaseNode"
    - type: object
      required:
        - value
        - hidden
      properties:
        value:
          type: number
          format: double
          description: Number of winning bids/amount of money exchanged depending on network settings
        hidden:
          type: boolean
          description: If the node is part of a cluster it is inactive
  NodeDetails:
    allOf:
    - $ref: "#/definitions/BaseNode"
    - type: object
      properties:
        numberOfWinningBids:
          type: integer
          description: How many bids has this actor won?
        amountOfMoneyExchanged:
          type: number
          format: double
          description: Total amount of money exchanged by this actor
        percentValuesMissing:
          type: number
          format: double
          description: What percent of this actor's bids have the value undisclosed
        winningBids:
          type: array
          description: The winning bids of this actor
          items:
            $ref: "#/definitions/Bid"
        nodes:
          type: array
          description: If the node is a cluster this array will contain the IDs of its nodes
          items:
            type: string
            description: Node ID
            format: uuid
  NetworkCluster:
    allOf:
    - $ref: "#/definitions/NetworkNode"
    - type: object
      required:
        - nodes
      properties:
        nodes:
          type: array
          description: Array of IDs of nodes that make up the cluster
          items:
            type: string
            description: Node ID
            format: uuid
  NetworkEdge:
    type: object
    required:
      - type
      - value
      - to
      - from
    properties:
      type:
        type: string
        description: Edge type (bidder/buyer)
        enum:
          - contracts
          - partners
      value:
        type: number
        format: double
        description: Number of winning bids/amount of money exchanged depending on network settings
      from:
        type: string
        format: uuid
        description: ID of the base node
      to:
        type: string
        description: ID of the receiving node
      hidden:
        type: boolean
        description: If the edge is attached to an inactive node it is inactive
  Bid:
    type: object
    description: The bid applied to win a certain lot
    properties:
      value:
        type: number
        format: double
        description: Value of the bid in EURO
      isWinning:
        type: boolean
        description: Did this bid won the lot?
      TEDCANID:
        type: string
        description: ID of the Contract Award Notice on ted.europa.eu
      isSubcontracted:
        type: boolean
        description: Did the winner subcontract another company for this bid?
      lot:
        $ref:  "#/definitions/Lot"
      bidders:
        type: array
        items:
          allOf:
          - $ref: "#/definitions/Actor"
          - type: object
            properties:
              nodeID:
                type: string
                description: ID of the node corresponding to this actor in the Network
                format: uuid
  Lot:
    type: object
    description: The lot that comprises a certain tender
    properties:
      title:
        type: string
        description : The title given to the lot by buyers
      description:
        type: string
        description: Description provided by buyers
      bidsCount:
        type: integer
        description: How many bids were applied for this lot?
      awardDecisionDate:
        type: string
        format: date
        description: Date when the lot was awarded
      selectionMethod:
        type: string
        description: What method was applied to select the winning bid?
      estimatedValue:
        type: number
        format: double
        description: Estimated value of the lot in EURO
      addressOfImplementation:
        $ref: "#/definitions/Address"
      tender:
        $ref: "#/definitions/Tender"
  Tender:
    type: object
    description: The tender lots and bids are part of
    properties:
      id:
        type: string
        description: ID of the tender, equivalent to Digiwhist
      year:
        type: integer
        description: Year when the contract notice or contract award notice was published
      TEDCNID:
        type: string
        description: ID of the Contract Notice on ted.europa.eu
      title:
        type: string
        description: Title of the tender
      titleEnglish:
        type: string
        description: Title of the tender in Enghish
      description:
        type: string
        description: Description of the tender
      isEUFunded:
        type: boolean
        description: Is the tender founded completely or partially by EU?
      isCoveredByGpa:
        type: boolean
        description: Is the tender covered by GPA?
      isFrameworkAgreement:
        type: boolean
        description: Is the tender part of a framework agreeement?
      procedureType:
        type: string
      finalValue:
        type: number
        format: double
        description: Total value of all the winning bids in the tender
      buyers:
        type: array
        items:
          allOf:
          - $ref: "#/definitions/Actor"
          - type: object
            properties:
              nodeID:
                type: string
                description: ID of the node corresponding to this actor in the Network
                format: uuid
  CpvIndexResponse:
    type: object
    properties:
      cpvs:
        type: array
        items:
          $ref: "#/definitions/Cpv"
  Cpv:
    required:
      - code
      - xName
      - xNumberDigits
    properties:
      code:
        type: string
        description: CPV code
      xName:
        type: string
        description: CPV name
      xNumberDigits:
        type: integer
        description: Number of relevant digits in the CPV
      xNumberBids:
        type: integer
        description: Number of bids with this CPV
  CountryIndexResponse:
    type: object
    properties:
      countries:
        type: array
        items:
          $ref: "#/definitions/Country"
  Country:
    type: object
    required:
      - code
    properties:
      code:
        type: string
        description: ISO 3166-1 alpha-2 country code
      name:
        type: string
        description: Full name of the country
  YearIndexResponse:
    type: object
    properties:
      years:
        type: array
        items:
          type: integer
  ActorIndexResponse:
    type: object
    properties:
      actors:
        type: array
        items:
          $ref: "#/definitions/Actor"
  Actor:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: Actor id, equivalent to Digiwhist
        format: uuid
      name:
        type: string
        description: Actor name
      type:
        type: string
        description: Actor type
        enum:
          - bidder
          - buyer
  Address:
    type: object
    properties:
      rawAddress:
        type: string
        description: Raw string for unstructured address
      street:
        type: string
        description: Street including numbers
      city:
        type: string
      country:
        type: string
        description: ISO 3166-1 alpha-2 country code
      nuts:
        type: array
        description: Array of Nuts
        items:
          type: string
          description: Original Nuts code of region
  ErrorResponse:
    type: object
    required:
      - errors
    properties:
      errors:
        type: array
        description: Array of errors encountered in given request
        items:
          type: object
          required:
            - message
          properties:
            message:
              type: string
